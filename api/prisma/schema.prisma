generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//PROYECTO FINAL

model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  password          String
  role              String
  applicant         Applicant?
  company           Company?
}

model Applicant {
  id                Int             @id @default(autoincrement())
  //RELACION CON USER
  user              User            @relation(fields: [userId], references: [id])
  userId            Int
  //=============
  firstName         String
  lastName          String
  about             String
  phoneNumber       String
  country           String
  image             String
  showImage         Boolean
  experience        Experience[]
  education         Education[]
  languages         Languages[]
  skillTags         Tags[]
  notifications     Notification[]
  followed          Company[]
  postulations      Post[]          @relation("_UserToPostulations")
  favourites        Post[]          @relation("_UserToFavourites")
}

model Company {
  id                Int             @id @default(autoincrement())
  //RELACION CON USER
  user              User            @relation(fields: [userId], references: [id])
  userId            Int
  //=============
  name              String
  legalName         String
  stin              String
  image             String
  companyValues     String
  mission           String
  vision            String
  accountManagers   String[]
  notifications     Notification[]
  reviews           Review[]
  posts             Post[]
  followers         Applicant[]
}

model Post {
  postId            Int             @id @default(autoincrement())
  companyId         Int
  title             String
  description       String
  location          String
  modality          String
  contractType      String
  salary            String
  startDate         String
  endDate           String
  category          String
  tags              String[]
  company           Company         @relation(fields: [companyId], references: [id])
  applicants        Applicant[]     @relation("_UserToPostulations")
  favoritedBy       Applicant[]     @relation("_UserToFavourites")
}

model Experience {
    id              Int             @id @default(autoincrement())
    position        String
    company         String
    startDate       String
    endDate         String
    description     String
    //RELACION CON APPLICANT
    applicant       Applicant       @relation(fields: [applicantId], references: [id])
    applicantId     Int
}

model Education {
    id              Int             @id @default(autoincrement())
    degree          String
    institution     String
    startDate       String
    endDate         String
    description     String
    //RELACION CON APPLICANT
    applicant       Applicant       @relation(fields: [applicantId], references: [id])
    applicantId     Int
}

model Languages {
    id              Int             @id @default(autoincrement())
    language        String
    level           String
    //RELACION CON APPLICANT
    applicant       Applicant       @relation(fields: [applicantId], references: [id])
    applicantId     Int
}

model Review {
    id              Int             @id @default(autoincrement())
    description     String
    score           Int
    //RELACION REVIEWS CON COMPANIA
    company         Company         @relation(fields: [companyId], references: [id])
    companyId       Int
    //=============
}

model Category {
    id              Int             @id @default(autoincrement())
    name            String
}

model Tags {
    id              Int             @id @default(autoincrement())
    name            String
    applicant       Applicant[]
}

model Notification {
    id              Int             @id @default(autoincrement())
    message         String
    //RELACION NOTIFICACIONES Y APPLICANT
    applicant       Applicant       @relation(fields: [applicantId], references: [id])
    applicantId     Int
    //RELACION NOTIFICACIONES Y COMPANY
    company         Company         @relation(fields: [companyId], references: [id])
    companyId       Int
}

model News {
    id              Int             @id @default(autoincrement())
    image           String
    title           String
    description     String
}